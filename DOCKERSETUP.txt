# Docker Setup Guide for ExpatEats

This guide will help you set up and run the ExpatEats project locally using Docker on Ubuntu Linux.

## Project Overview

ExpatEats is a full-stack TypeScript application with:
- **Frontend**: React + TypeScript + Vite
- **Backend**: Express.js + TypeScript
- **Database**: PostgreSQL with Drizzle ORM
- **Package Manager**: npm

## Prerequisites

### 1. Install Docker and Docker Compose

Update your system:
```bash
sudo apt update && sudo apt upgrade -y
```

Install Docker:
```bash
# Remove old versions if any
sudo apt-get remove docker docker-engine docker.io containerd runc

# Install required packages
sudo apt-get install ca-certificates curl gnupg lsb-release

# Add Docker's official GPG key
sudo mkdir -m 0755 -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

# Set up repository
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# Install Docker Engine
sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
```

Add your user to the docker group:
```bash
sudo usermod -aG docker $USER
```

Log out and log back in for the group change to take effect.

Verify Docker installation:
```bash
docker --version
docker compose version
```

### 2. Install Git (if not already installed)
```bash
sudo apt install git
```

## Setting Up the Project

### 1. Clone the Repository (if needed)
```bash
git clone <your-repo-url>
cd ExpatEats
```

### 2. Environment Variables

Create a `.env` file in the project root:
```bash
# Database Configuration
DATABASE_URL=postgresql://expatuser:expatpass@postgres:5432/expatdb

# Application Configuration
NODE_ENV=development
PORT=3000

# Session Configuration (generate a secure secret)
SESSION_SECRET=your-super-secret-session-key-change-this-in-production

# External API Keys (if needed)
# OPENAI_API_KEY=your-openai-key
# SENDGRID_API_KEY=your-sendgrid-key
# MAPBOX_ACCESS_TOKEN=your-mapbox-token
```

**IMPORTANT**: Replace `your-super-secret-session-key-change-this-in-production` with a strong, random string.

## Database Setup

### Option 1: PostgreSQL in Docker Container (Recommended)

The database will run inside a Docker container alongside your application. This is easier to manage and keeps everything contained.

### Option 2: External PostgreSQL (Alternative)

If you prefer to run PostgreSQL outside Docker:

```bash
# Install PostgreSQL
sudo apt update
sudo apt install postgresql postgresql-contrib

# Start PostgreSQL service
sudo systemctl start postgresql
sudo systemctl enable postgresql

# Create database and user
sudo -u postgres psql
CREATE DATABASE expatdb;
CREATE USER expatuser WITH PASSWORD 'expatpass';
GRANT ALL PRIVILEGES ON DATABASE expatdb TO expatuser;
\q

# Update DATABASE_URL in .env to use localhost instead of postgres
DATABASE_URL=postgresql://expatuser:expatpass@localhost:5432/expatdb
```

## Running the Application

### Development Mode

1. **Start the services**:
```bash
docker compose up --build
```

This will:
- Build the application image
- Start PostgreSQL database
- Start the Node.js application
- Install all dependencies
- Run database migrations
- Start the development server

2. **Access the application**:
- Frontend: http://localhost:3000
- Backend API: http://localhost:3000/api

3. **View logs**:
```bash
# All services
docker compose logs -f

# Specific service
docker compose logs -f app
docker compose logs -f postgres
```

4. **Stop the services**:
```bash
docker compose down
```

### Production Mode

To run in production mode:
```bash
docker compose -f docker-compose.prod.yml up --build -d
```

## Database Management

### Running Migrations
```bash
# Inside the container
docker compose exec app npm run db:push

# Or from host (if you have Node.js installed)
npm run db:push
```

### Accessing the Database
```bash
# Connect to PostgreSQL container
docker compose exec postgres psql -U expatuser -d expatdb

# View tables
\dt

# Exit
\q
```

### Database Backup
```bash
# Create backup
docker compose exec postgres pg_dump -U expatuser expatdb > backup.sql

# Restore backup
docker compose exec -T postgres psql -U expatuser expatdb < backup.sql
```

## Development Workflow

### Making Code Changes

The application uses volume mounts, so changes to your code will be reflected immediately:

1. Edit files in your local directory
2. The development server will automatically reload
3. Database changes require running migrations

### Installing New Dependencies

```bash
# Install new package
docker compose exec app npm install <package-name>

# Or rebuild the container
docker compose up --build
```

### Running Commands Inside Container

```bash
# General command
docker compose exec app <command>

# Examples
docker compose exec app npm install
docker compose exec app npm run check
docker compose exec app npx drizzle-kit generate
```

## Troubleshooting

### Common Issues

1. **Port already in use**:
```bash
# Find process using port 3000
sudo lsof -i :3000
# Kill the process
sudo kill -9 <PID>
```

2. **Database connection issues**:
- Ensure PostgreSQL container is running: `docker compose ps`
- Check DATABASE_URL in .env file
- Verify database credentials

3. **Permission issues**:
```bash
# Fix Docker permissions
sudo chown -R $USER:$USER .
```

4. **Container build issues**:
```bash
# Clean rebuild
docker compose down
docker system prune -f
docker compose up --build
```

5. **Out of disk space**:
```bash
# Clean unused Docker resources
docker system prune -a
```

### Useful Commands

```bash
# View running containers
docker compose ps

# View container resource usage
docker stats

# Access container shell
docker compose exec app bash

# View container logs in real-time
docker compose logs -f app

# Restart specific service
docker compose restart app

# Remove all containers and volumes
docker compose down -v
```

## File Structure

After setup, your project structure should be:
```
ExpatEats/
├── client/                 # React frontend
├── server/                 # Express backend
├── shared/                 # Shared TypeScript types
├── migrations/            # Database migrations
├── .env                   # Environment variables
├── docker-compose.yml     # Docker configuration
├── Dockerfile            # Application container
├── package.json          # Dependencies and scripts
└── DOCKERSETUP.txt       # This guide
```

## Performance Tips

1. **Use Docker BuildKit**:
```bash
export DOCKER_BUILDKIT=1
```

2. **Optimize rebuilds**:
- Use `.dockerignore` to exclude unnecessary files
- Leverage Docker layer caching

3. **Monitor resources**:
```bash
docker stats
```

4. **Production optimizations**:
- Use multi-stage builds
- Minimize image size
- Use health checks

## Security Considerations

1. **Environment Variables**:
   - Never commit `.env` file to git
   - Use strong, unique passwords
   - Rotate secrets regularly

2. **Database Security**:
   - Use non-default passwords
   - Limit database access
   - Regular backups

3. **Container Security**:
   - Keep base images updated
   - Run as non-root user
   - Scan images for vulnerabilities

## Next Steps

After successful setup:
1. Review the application code
2. Set up your development environment
3. Configure external APIs (OpenAI, SendGrid, Mapbox) if needed
4. Set up proper logging and monitoring
5. Configure CI/CD pipelines

For production deployment, consider:
- Using managed database services
- Setting up proper secrets management
- Implementing health checks and monitoring
- Using a reverse proxy (nginx)
- Setting up SSL certificates